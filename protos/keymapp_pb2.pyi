"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import builtins
import collections.abc
import concurrent.futures
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import google.protobuf.service
import typing

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class Keyboard(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ID_FIELD_NUMBER: builtins.int
    FRIENDLY_NAME_FIELD_NUMBER: builtins.int
    IS_CONNECTED_FIELD_NUMBER: builtins.int
    id: builtins.int
    friendly_name: builtins.str
    is_connected: builtins.bool
    def __init__(
        self,
        *,
        id: builtins.int = ...,
        friendly_name: builtins.str = ...,
        is_connected: builtins.bool = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["friendly_name", b"friendly_name", "id", b"id", "is_connected", b"is_connected"]) -> None: ...

global___Keyboard = Keyboard

@typing.final
class ConnectedKeyboard(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    FRIENDLY_NAME_FIELD_NUMBER: builtins.int
    FIRMWARE_VERSION_FIELD_NUMBER: builtins.int
    CURRENT_LAYER_FIELD_NUMBER: builtins.int
    friendly_name: builtins.str
    firmware_version: builtins.str
    current_layer: builtins.int
    def __init__(
        self,
        *,
        friendly_name: builtins.str = ...,
        firmware_version: builtins.str = ...,
        current_layer: builtins.int = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["current_layer", b"current_layer", "firmware_version", b"firmware_version", "friendly_name", b"friendly_name"]) -> None: ...

global___ConnectedKeyboard = ConnectedKeyboard

@typing.final
class GetStatusRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    def __init__(
        self,
    ) -> None: ...

global___GetStatusRequest = GetStatusRequest

@typing.final
class GetStatusReply(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    KEYMAPP_VERSION_FIELD_NUMBER: builtins.int
    CONNECTED_KEYBOARD_FIELD_NUMBER: builtins.int
    keymapp_version: builtins.str
    @property
    def connected_keyboard(self) -> global___ConnectedKeyboard: ...
    def __init__(
        self,
        *,
        keymapp_version: builtins.str = ...,
        connected_keyboard: global___ConnectedKeyboard | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["connected_keyboard", b"connected_keyboard"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["connected_keyboard", b"connected_keyboard", "keymapp_version", b"keymapp_version"]) -> None: ...

global___GetStatusReply = GetStatusReply

@typing.final
class GetKeyboardsRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    def __init__(
        self,
    ) -> None: ...

global___GetKeyboardsRequest = GetKeyboardsRequest

@typing.final
class GetKeyboardsReply(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    KEYBOARDS_FIELD_NUMBER: builtins.int
    @property
    def keyboards(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Keyboard]: ...
    def __init__(
        self,
        *,
        keyboards: collections.abc.Iterable[global___Keyboard] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["keyboards", b"keyboards"]) -> None: ...

global___GetKeyboardsReply = GetKeyboardsReply

@typing.final
class ConnectAnyKeyboardRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    def __init__(
        self,
    ) -> None: ...

global___ConnectAnyKeyboardRequest = ConnectAnyKeyboardRequest

@typing.final
class ConnectKeyboardRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ID_FIELD_NUMBER: builtins.int
    id: builtins.int
    def __init__(
        self,
        *,
        id: builtins.int = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["id", b"id"]) -> None: ...

global___ConnectKeyboardRequest = ConnectKeyboardRequest

@typing.final
class ConnectKeyboardReply(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SUCCESS_FIELD_NUMBER: builtins.int
    success: builtins.bool
    def __init__(
        self,
        *,
        success: builtins.bool = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["success", b"success"]) -> None: ...

global___ConnectKeyboardReply = ConnectKeyboardReply

@typing.final
class DisconnectKeyboardRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    def __init__(
        self,
    ) -> None: ...

global___DisconnectKeyboardRequest = DisconnectKeyboardRequest

@typing.final
class DisconnectKeyboardReply(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SUCCESS_FIELD_NUMBER: builtins.int
    success: builtins.bool
    def __init__(
        self,
        *,
        success: builtins.bool = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["success", b"success"]) -> None: ...

global___DisconnectKeyboardReply = DisconnectKeyboardReply

@typing.final
class SetLayerRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    LAYER_FIELD_NUMBER: builtins.int
    layer: builtins.int
    def __init__(
        self,
        *,
        layer: builtins.int = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["layer", b"layer"]) -> None: ...

global___SetLayerRequest = SetLayerRequest


@typing.final
class SetLayerReply(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SUCCESS_FIELD_NUMBER: builtins.int
    success: builtins.bool
    def __init__(
        self,
        *,
        success: builtins.bool = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["success", b"success"]) -> None: ...

global___SetLayerReply = SetLayerReply

@typing.final
class SetRGBLedRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    LED_FIELD_NUMBER: builtins.int
    RED_FIELD_NUMBER: builtins.int
    GREEN_FIELD_NUMBER: builtins.int
    BLUE_FIELD_NUMBER: builtins.int
    SUSTAIN_FIELD_NUMBER: builtins.int
    led: builtins.int
    red: builtins.int
    green: builtins.int
    blue: builtins.int
    sustain: builtins.int
    def __init__(
        self,
        *,
        led: builtins.int = ...,
        red: builtins.int = ...,
        green: builtins.int = ...,
        blue: builtins.int = ...,
        sustain: builtins.int = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["blue", b"blue", "green", b"green", "led", b"led", "red", b"red", "sustain", b"sustain"]) -> None: ...

global___SetRGBLedRequest = SetRGBLedRequest

@typing.final
class SetRGBLedReply(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SUCCESS_FIELD_NUMBER: builtins.int
    success: builtins.bool
    def __init__(
        self,
        *,
        success: builtins.bool = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["success", b"success"]) -> None: ...

global___SetRGBLedReply = SetRGBLedReply

@typing.final
class SetRGBAllRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    RED_FIELD_NUMBER: builtins.int
    GREEN_FIELD_NUMBER: builtins.int
    BLUE_FIELD_NUMBER: builtins.int
    SUSTAIN_FIELD_NUMBER: builtins.int
    red: builtins.int
    green: builtins.int
    blue: builtins.int
    sustain: builtins.int
    def __init__(
        self,
        *,
        red: builtins.int = ...,
        green: builtins.int = ...,
        blue: builtins.int = ...,
        sustain: builtins.int = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["blue", b"blue", "green", b"green", "red", b"red", "sustain", b"sustain"]) -> None: ...

global___SetRGBAllRequest = SetRGBAllRequest

@typing.final
class SetRGBAllReply(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SUCCESS_FIELD_NUMBER: builtins.int
    success: builtins.bool
    def __init__(
        self,
        *,
        success: builtins.bool = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["success", b"success"]) -> None: ...

global___SetRGBAllReply = SetRGBAllReply

@typing.final
class SetStatusLedRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    LED_FIELD_NUMBER: builtins.int
    ON_FIELD_NUMBER: builtins.int
    SUSTAIN_FIELD_NUMBER: builtins.int
    led: builtins.int
    on: builtins.bool
    sustain: builtins.int
    def __init__(
        self,
        *,
        led: builtins.int = ...,
        on: builtins.bool = ...,
        sustain: builtins.int = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["led", b"led", "on", b"on", "sustain", b"sustain"]) -> None: ...

global___SetStatusLedRequest = SetStatusLedRequest

@typing.final
class SetStatusLedReply(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SUCCESS_FIELD_NUMBER: builtins.int
    success: builtins.bool
    def __init__(
        self,
        *,
        success: builtins.bool = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["success", b"success"]) -> None: ...

global___SetStatusLedReply = SetStatusLedReply

@typing.final
class IncreaseBrightnessRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    def __init__(
        self,
    ) -> None: ...

global___IncreaseBrightnessRequest = IncreaseBrightnessRequest

@typing.final
class DecreaseBrightnessRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    def __init__(
        self,
    ) -> None: ...

global___DecreaseBrightnessRequest = DecreaseBrightnessRequest

@typing.final
class BrightnessUpdateReply(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SUCCESS_FIELD_NUMBER: builtins.int
    success: builtins.bool
    def __init__(
        self,
        *,
        success: builtins.bool = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["success", b"success"]) -> None: ...

global___BrightnessUpdateReply = BrightnessUpdateReply

class KeyboardService(google.protobuf.service.Service, metaclass=abc.ABCMeta):
    DESCRIPTOR: google.protobuf.descriptor.ServiceDescriptor
    @abc.abstractmethod
    def GetStatus(
        inst: KeyboardService,  # pyright: ignore[reportSelfClsParameterName]
        rpc_controller: google.protobuf.service.RpcController,
        request: global___GetStatusRequest,
        callback: collections.abc.Callable[[global___GetStatusReply], None] | None,
    ) -> concurrent.futures.Future[global___GetStatusReply]: ...

    @abc.abstractmethod
    def GetKeyboards(
        inst: KeyboardService,  # pyright: ignore[reportSelfClsParameterName]
        rpc_controller: google.protobuf.service.RpcController,
        request: global___GetKeyboardsRequest,
        callback: collections.abc.Callable[[global___GetKeyboardsReply], None] | None,
    ) -> concurrent.futures.Future[global___GetKeyboardsReply]:
        """Returns a list of all detected keyboards."""

    @abc.abstractmethod
    def ConnectKeyboard(
        inst: KeyboardService,  # pyright: ignore[reportSelfClsParameterName]
        rpc_controller: google.protobuf.service.RpcController,
        request: global___ConnectKeyboardRequest,
        callback: collections.abc.Callable[[global___ConnectKeyboardReply], None] | None,
    ) -> concurrent.futures.Future[global___ConnectKeyboardReply]:
        """Connects to a keyboard using given an id retrieved from GetKeyboards."""

    @abc.abstractmethod
    def ConnectAnyKeyboard(
        inst: KeyboardService,  # pyright: ignore[reportSelfClsParameterName]
        rpc_controller: google.protobuf.service.RpcController,
        request: global___ConnectAnyKeyboardRequest,
        callback: collections.abc.Callable[[global___ConnectKeyboardReply], None] | None,
    ) -> concurrent.futures.Future[global___ConnectKeyboardReply]:
        """Connects to the first available keyboard."""

    @abc.abstractmethod
    def DisconnectKeyboard(
        inst: KeyboardService,  # pyright: ignore[reportSelfClsParameterName]
        rpc_controller: google.protobuf.service.RpcController,
        request: global___DisconnectKeyboardRequest,
        callback: collections.abc.Callable[[global___DisconnectKeyboardReply], None] | None,
    ) -> concurrent.futures.Future[global___DisconnectKeyboardReply]:
        """Disconnects to a keyboard using given an id retrieved from GetKeyboards."""

    @abc.abstractmethod
    def SetLayer(
        inst: KeyboardService,  # pyright: ignore[reportSelfClsParameterName]
        rpc_controller: google.protobuf.service.RpcController,
        request: global___SetLayerRequest,
        callback: collections.abc.Callable[[global___SetLayerReply], None] | None,
    ) -> concurrent.futures.Future[global___SetLayerReply]:
        """Sets the active layer of a connected keyboard."""

    @abc.abstractmethod
    def UnsetLayer(
        inst: KeyboardService,  # pyright: ignore[reportSelfClsParameterName]
        rpc_controller: google.protobuf.service.RpcController,
        request: global___SetLayerRequest,
        callback: collections.abc.Callable[[global___SetLayerReply], None] | None,
    ) -> concurrent.futures.Future[global___SetLayerReply]:
        """Unsets a previously set layer."""

    @abc.abstractmethod
    def SetRGBLed(
        inst: KeyboardService,  # pyright: ignore[reportSelfClsParameterName]
        rpc_controller: google.protobuf.service.RpcController,
        request: global___SetRGBLedRequest,
        callback: collections.abc.Callable[[global___SetRGBLedReply], None] | None,
    ) -> concurrent.futures.Future[global___SetRGBLedReply]:
        """Sets the color of a specific LED on the keyboard."""

    @abc.abstractmethod
    def SetRGBAll(
        inst: KeyboardService,  # pyright: ignore[reportSelfClsParameterName]
        rpc_controller: google.protobuf.service.RpcController,
        request: global___SetRGBAllRequest,
        callback: collections.abc.Callable[[global___SetRGBAllReply], None] | None,
    ) -> concurrent.futures.Future[global___SetRGBAllReply]:
        """Sets the color of all LEDs on the keyboard."""

    @abc.abstractmethod
    def SetStatusLed(
        inst: KeyboardService,  # pyright: ignore[reportSelfClsParameterName]
        rpc_controller: google.protobuf.service.RpcController,
        request: global___SetStatusLedRequest,
        callback: collections.abc.Callable[[global___SetStatusLedReply], None] | None,
    ) -> concurrent.futures.Future[global___SetStatusLedReply]:
        """Sets the status LED on the keyboard."""

    @abc.abstractmethod
    def IncreaseBrightness(
        inst: KeyboardService,  # pyright: ignore[reportSelfClsParameterName]
        rpc_controller: google.protobuf.service.RpcController,
        request: global___IncreaseBrightnessRequest,
        callback: collections.abc.Callable[[global___BrightnessUpdateReply], None] | None,
    ) -> concurrent.futures.Future[global___BrightnessUpdateReply]:
        """Increases the brightness of the keyboard."""

    @abc.abstractmethod
    def DecreaseBrightness(
        inst: KeyboardService,  # pyright: ignore[reportSelfClsParameterName]
        rpc_controller: google.protobuf.service.RpcController,
        request: global___DecreaseBrightnessRequest,
        callback: collections.abc.Callable[[global___BrightnessUpdateReply], None] | None,
    ) -> concurrent.futures.Future[global___BrightnessUpdateReply]:
        """Decreases the brightness of the keyboard."""

class KeyboardService_Stub(KeyboardService):
    def __init__(self, rpc_channel: google.protobuf.service.RpcChannel) -> None: ...
    DESCRIPTOR: google.protobuf.descriptor.ServiceDescriptor
    def GetStatus(
        inst: KeyboardService_Stub,  # pyright: ignore[reportSelfClsParameterName]
        rpc_controller: google.protobuf.service.RpcController,
        request: global___GetStatusRequest,
        callback: collections.abc.Callable[[global___GetStatusReply], None] | None = ...,
    ) -> concurrent.futures.Future[global___GetStatusReply]: ...

    def GetKeyboards(
        inst: KeyboardService_Stub,  # pyright: ignore[reportSelfClsParameterName]
        rpc_controller: google.protobuf.service.RpcController,
        request: global___GetKeyboardsRequest,
        callback: collections.abc.Callable[[global___GetKeyboardsReply], None] | None = ...,
    ) -> concurrent.futures.Future[global___GetKeyboardsReply]:
        """Returns a list of all detected keyboards."""

    def ConnectKeyboard(
        inst: KeyboardService_Stub,  # pyright: ignore[reportSelfClsParameterName]
        rpc_controller: google.protobuf.service.RpcController,
        request: global___ConnectKeyboardRequest,
        callback: collections.abc.Callable[[global___ConnectKeyboardReply], None] | None = ...,
    ) -> concurrent.futures.Future[global___ConnectKeyboardReply]:
        """Connects to a keyboard using given an id retrieved from GetKeyboards."""

    def ConnectAnyKeyboard(
        inst: KeyboardService_Stub,  # pyright: ignore[reportSelfClsParameterName]
        rpc_controller: google.protobuf.service.RpcController,
        request: global___ConnectAnyKeyboardRequest,
        callback: collections.abc.Callable[[global___ConnectKeyboardReply], None] | None = ...,
    ) -> concurrent.futures.Future[global___ConnectKeyboardReply]:
        """Connects to the first available keyboard."""

    def DisconnectKeyboard(
        inst: KeyboardService_Stub,  # pyright: ignore[reportSelfClsParameterName]
        rpc_controller: google.protobuf.service.RpcController,
        request: global___DisconnectKeyboardRequest,
        callback: collections.abc.Callable[[global___DisconnectKeyboardReply], None] | None = ...,
    ) -> concurrent.futures.Future[global___DisconnectKeyboardReply]:
        """Disconnects to a keyboard using given an id retrieved from GetKeyboards."""

    def SetLayer(
        inst: KeyboardService_Stub,  # pyright: ignore[reportSelfClsParameterName]
        rpc_controller: google.protobuf.service.RpcController,
        request: global___SetLayerRequest,
        callback: collections.abc.Callable[[global___SetLayerReply], None] | None = ...,
    ) -> concurrent.futures.Future[global___SetLayerReply]:
        """Sets the active layer of a connected keyboard."""

    def UnsetLayer(
        inst: KeyboardService_Stub,  # pyright: ignore[reportSelfClsParameterName]
        rpc_controller: google.protobuf.service.RpcController,
        request: global___SetLayerRequest,
        callback: collections.abc.Callable[[global___SetLayerReply], None] | None = ...,
    ) -> concurrent.futures.Future[global___SetLayerReply]:
        """Unsets a previously set layer."""

    def SetRGBLed(
        inst: KeyboardService_Stub,  # pyright: ignore[reportSelfClsParameterName]
        rpc_controller: google.protobuf.service.RpcController,
        request: global___SetRGBLedRequest,
        callback: collections.abc.Callable[[global___SetRGBLedReply], None] | None = ...,
    ) -> concurrent.futures.Future[global___SetRGBLedReply]:
        """Sets the color of a specific LED on the keyboard."""

    def SetRGBAll(
        inst: KeyboardService_Stub,  # pyright: ignore[reportSelfClsParameterName]
        rpc_controller: google.protobuf.service.RpcController,
        request: global___SetRGBAllRequest,
        callback: collections.abc.Callable[[global___SetRGBAllReply], None] | None = ...,
    ) -> concurrent.futures.Future[global___SetRGBAllReply]:
        """Sets the color of all LEDs on the keyboard."""

    def SetStatusLed(
        inst: KeyboardService_Stub,  # pyright: ignore[reportSelfClsParameterName]
        rpc_controller: google.protobuf.service.RpcController,
        request: global___SetStatusLedRequest,
        callback: collections.abc.Callable[[global___SetStatusLedReply], None] | None = ...,
    ) -> concurrent.futures.Future[global___SetStatusLedReply]:
        """Sets the status LED on the keyboard."""

    def IncreaseBrightness(
        inst: KeyboardService_Stub,  # pyright: ignore[reportSelfClsParameterName]
        rpc_controller: google.protobuf.service.RpcController,
        request: global___IncreaseBrightnessRequest,
        callback: collections.abc.Callable[[global___BrightnessUpdateReply], None] | None = ...,
    ) -> concurrent.futures.Future[global___BrightnessUpdateReply]:
        """Increases the brightness of the keyboard."""

    def DecreaseBrightness(
        inst: KeyboardService_Stub,  # pyright: ignore[reportSelfClsParameterName]
        rpc_controller: google.protobuf.service.RpcController,
        request: global___DecreaseBrightnessRequest,
        callback: collections.abc.Callable[[global___BrightnessUpdateReply], None] | None = ...,
    ) -> concurrent.futures.Future[global___BrightnessUpdateReply]:
        """Decreases the brightness of the keyboard."""
